from collections import defaultdict
 import sys


 # Class which will represent Kruscals algorithm graph
 class GraphForKruskalMinimalSpanningTree:

     def __init__(self, vertices):
         self.V = vertices
         self.graph = []

     # Function which add's an edge to a chosen graph
     def addEdge(self, u, v, w):
         self.graph.append([u, v, w])

     # Utility function which find's set of i elements
     def find(self, parent, i):
         if parent[i] == i:
             return i
         return self.find(parent, parent[i])

     # Function which unites two sets of x and y
     def union(self, parent, rank, x, y):
         rootx = self.find(parent, x)
         rooty = self.find(parent, y)

         if rank[rootx] < rank[rooty]:
             parent[rootx] = rooty
         elif rank[rootx] > rank[rooty]:
             parent[rooty] = rootx
         else:
             parent[rooty] = rootx
             rank[rootx] += 1

     # Main function which construct's minimal spanning tree using Kruskal's algorithm
     def KruskalMinimalSpanningTree(self):

         result = []

         i = 0  # An index variable, used for sorted edges
         e = 0  # An index variable, used for result

         self.graph = sorted(self.graph, key=lambda item: item[2])

         parent = []
         rank = []

         # Create V subsets with single elements
         for node in range(self.V):
             parent.append(node)
             rank.append(0)

         # Number of edges which will be taken is equal to V-1
         while e < self.V - 1:

             # Pick the smallest edge and increment the index for next iteration
             u, v, w = self.graph[i]
             i = i + 1
             x = self.find(parent, u)
             y = self.find(parent, v)

             # If including this edge does't cause cycle, include it into the result
             # and increment the index of a result for the next edge

             if x != y:
                 e = e + 1
                 result.append([u, v, w])
                 self.union(parent, rank, x, y)
                 # Otherwise discard the edge

         # Print the contents of a result on a display the built minimal spanning tree
         print ("Edge\tWeight")
         for u, v, weight in result:
             print ("%d -- %d\t  %d" % (u, v, weight))


 # Class which represent's a graph for Prims algorithm
 class GraphForPrimMinimalSpanningTree():

     def __init__(self, vertices):
         self.V = vertices
         self.graph = [[0 for column in range(vertices)]
                       for row in range(vertices)]

     def get_element(self, u, v):
         return self.gragh[u][v]

     # An utility function which print's constructed minimal spanning tree stored in parent array
     def printMinimalSpanningTree(self, parent):
         print ("Edge\tWeight")
         for i in range(1, self.V):
             print(parent[i], "--", i, "\t ", self.get_element(i, parent[i]))

             # An utility function to find the vertex with minimum distance value, from the set of vertices
             # which are not included in shortest path tree yet
     def minKey(self, key, MinimalSpanningTreeSet):

         min = sys.maxsize

         for v in range(self.V):
             if key[v] < min and MinimalSpanningTreeSet[v] == False:
                 min = key[v]
                 min_index = v

         return min_index

     # Main function which creates and print minimal spanning tree (MST) using Prims algorithm
     def primMinimalSpanningTree(self):

         # Values of the keys which are used to pick minimum weight edge in the cut
         key = [sys.maxsize] * self.V
         parent = [None] * self.V  # Creating an array to store constructed MinimalSpanningTree
         # Makeing a zero key so that vertex is picked as a first vertex
         key[0] = 0
         MinimalSpanningTreeSet = [False] * self.V

         parent[0] = -1  # First node is always the root

         for i in range(self.V):

             u = self.minKey(key, MinimalSpanningTreeSet)

             MinimalSpanningTreeSet[u] = True

             # Update dist value of the adjacent vertices
             for v in range(self.V):
                 if self.get_element(u, v) > 0 and MinimalSpanningTreeSet[v] == False and key[v] > self.get_element(u, v):
                     key[v] = self.get_element(u, v)
                     parent[v] = u

         self.printMinimalSpanningTree(parent)


 g = GraphForKruskalMinimalSpanningTree(8)

 g.addEdge(0, 1, 10)
 g.addEdge(0, 3, 10)
 g.addEdge(0, 4, 5)
 g.addEdge(1, 2, 8)
 g.addEdge(1, 5, 5)
 g.addEdge(2, 5, 4)
 g.addEdge(2, 7, 1)
 g.addEdge(3, 4, 10)
 g.addEdge(3, 6, 10)
 g.addEdge(4, 6, 5)
 g.addEdge(4, 7, 9)
 g.addEdge(5, 7, 3)
 g.addEdge(6, 7, 8)

 print("Kruskal's atgorithm:")
 g.KruskalMinimalSpanningTree()
 print("\n")

 g = GraphForPrimMinimalSpanningTree(8)
 g.gragh = [[0, 10, 0, 10, 5, 0, 0, 0],
            [10, 0, 8, 0, 0, 5, 0, 0],
            [0, 8, 0, 0, 0, 4, 0, 1],
            [10, 0, 0, 0, 10, 0, 10, 0],
            [5, 0, 0, 10, 0, 0, 5, 9],
            [0, 5, 4, 0, 0, 0, 0, 3],
            [0, 0, 0, 10, 5, 0, 0, 8],
            [0, 0, 1, 0, 9, 3, 8, 0]]

 print("Prim's algorithm:")
 g.primMinimalSpanningTree()
